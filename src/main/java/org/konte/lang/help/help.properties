# To change this template, choose Tools | Templates
# and open the template in the editor.

help=
commands=
intro=<ul>Help topics:\n\t<li>topics\n\t<li>tokens\n\t<li>parsing\n\t<li>transforms\n\t<li>affine\n\t<li>other\n\t<li>expressions\n\t<li>operators\n\t<li>comparators\n\t<li>functions\n\t</ul>\nTry also: help:[token name], e.g. -help:sx
model=model control settings. These are general-level decisions that will influence the generator.\n<p>Syntax:<pre>\n\tmodel { [property]* }</pre>, where\n property = [property-name] [value].\n\n<ul>Known properties are:\n<li><code>pushstack</code>; the runtime-size of the stack used by PUSH and POP directives;<li><code>feature</code>: minimum-size  of output shapes (SQUAREs or other paths);<li><code>maxshapes</code>: maximum number of output shapes;<li><code>order</code>: ordering principle on screen: known alternatives: [Z (default), WIDTH, SMALLNESS, STREAM] <li><code>streamrate</code>streaming rate (shapes per second) for order SREAM</ul>

rule=define a rule. <p>Examples:<pre>\n\trule draw 0.9 { SQUARE { } } // 9 out of ten draw calls give a square\n\trule draw 0.1 { BOX { } } // 1 out of ten draw calls give a box\n\n\trule pass { pre {x < 0 } SQUARE { } } // enter only if absolute turtle x position is less than zero</pre>
expressions=

x=translates along current x axis.  The initial x axis points conventionally from left to right on the screen plane.  A transformed (rotated or skewed) axis will point to any direction. In expression backreference, however, x refers to current absolute x position, independent of the rotation of the current transform.  Note that any other value for x could not be fixed. The other alternative would be that x, y, and z coordinates would always evaluate to zero.  <p>Usage: <code>SQUARE { x 0.5 }</code>
y=translates along current y axis.  The initial y axis points conventionally from down upwards on the screen plane.
z=translates along current z axis.  The initial z axis points away from the viewer and from the screen plane.
s=accepts one or three parameters: s [*s], or s [*sx] [*sy] [*sz].  The one parameter version applies a uniform scale on all three spatial axises.  The three parameter version applies given scale factors to the axises, respectively. Directive s will not backreference to any value.<p> Usage:<code>CIRCLE { s 1.281 }</code><p>Usage:<code>CIRCLE { s 0.5 1.0 1.0 } </code>
sx=scales along current x-axis. Initial scale is= 1. Increment model is multiplication, i.e. <code>sx 2</code> will scale to two times the original. In expression backreference, however, sx points to the absolute value for stretch along x-axis that can be modified by skew and rotation transforms.
sy=scales along current y-axis. Initial scale is= 1. Increment model is multiplication, i.e. <code>sy 2</code> will scale to a size two times the original. In expression backreference, however, sy points to the absolute value for stretch along y-axis that can be modified by skew and rotation transforms.
sz=scales along current z-axis. Initial scale is= 1. Increment model is multiplication, i.e. <code>sz 2</code> will scale to original*2. In expression backreference, however, sz points to the absolute value for stretch along x-axis that can be modified by skew and rotation transforms.
rx=rotates around the current x-axis. Positive value will rotate clockwise, negative counter-clockwise. Rotation is given in degrees, i.e. rx 360 will rotate to original.
ry=rotates around the current y-axis.
rz=rotates around the current z-axis. You can emulate a 2D canvas by only applying rotation around z axis and skew only along y and x axises.
skewx=skews along the current x-axis. Positive value will skew to the right, negative to left. Skew factor is based on degrees.
skewy=skews along the current y-axis. Positive value will skew upwards, negative downwards. Skew factor is based on degrees.
skewz=skews along the current z-axis. Positive value will skew away from the viewer, negative towards. Skew factor is based on degrees.
skew=skew along all three spatial axises; requires three arguments in the form <code>skew [expr1] [expr2] [expr3]</code>
flipx=flips over the current x axis
flipy=flips over the current y axis
flipz=flips over the current z axis

fov=Two usages: 1) creates a camera/fov definition;  2) sets the applied camera/fov.  Usage (1): <pre>\n\tcamera { [camera-name]\n\t\tx [expression] \n\t\ty [expression] \n\t\tz [expression] \n\t\trx [expression] \n\t\try [expression] \n\t\trz [expression] }</pre>Usage (2): <code> camera [defined-name] </code>.  The default camera is named MAIN. Other camera declarations will need to introduce a name.

R=adds delta to the current red component in RGB. Color value will be bounded to [0,1], where 0 =black and 1 =bright red. In expression backreference, returns the color value. Note that a shading, if applied, will modify the output color of a shape, but leave its underlying R,G, and B values intact.
G=adds delta to the current green component in RGB. Color value will be bounded to [0,1]. In expression backreference, returns the color value.
B=adds delta to the current blue component in RGB. Color value will be bounded to [0,1]. In expression backreference, returns the color value.
A=adds delta to the current alpha (transparency) value. Alpha value will be bounded to [0,1], where 0 =transparent and 1 =opaque. Default alpha is =1 (opaque). In expression backreference, returns the alpha value. Note that a shading, if applied, will modify the output transparency of a shape, but leave its underlying A value intact.
H=adds delta to a hue value deduced from the current RGB value, and sets RGB based on the new hue. Hue will be between [0,1], and 1 will rotate to 0 and vice versa. In backreference, H will evaluate to a hue value deduced from current RGB. Note that there is not always enough information to "preserve" hue over a range of changes in saturation.
S=adds delta to a saturation deduced from the current RGB. Sets RGB based on the new saturation. Saturation will be bounded to [0,1].
L=adds delta to a lighness deduced from the current RGB. Set RGB based on the new lighness value.  L is bounded to [0,1].
shading=keyword has two usages: 1) to define a shading; 2) to set applied shading. <p>Usage (1): <pre>\nshading BLUETOTR_RED {\n\tpoint(0) { RGB 0 0 1 }\n\tpoint(1) { RGB 1 0 0 A 0 }\n}</pre><p>Usage (2): <pre>\nrule AA { bb { shading BLUETOTR_RED col0 0.5} }</pre><p>bb would be magenta, half transparent. Set <code>shading -1</code> to disable any applied shading.
point=while creating a shading, define one RGB pivot. Supply the pivot's color space coordinates inside brackets, and RGBA information of the color inside curly brackets.<p>Example (two dimensional color space):<pre>\nshading three {\n\tpoint(0,0)  { RGB 1 0 0 }\n\tpoint(1,0)  { RGB 0 1 0 }\n\tpoint(.5,1) { RGB 0 0 1 }\n}</pre> 
col0=supply applied "x" coordinate inside the current user defined color space.
col1=supply applied "y" coordinate inside the current user defined color space.
col2=supply applied "z" coordinate inside the current user defined color space.
RGB=supply current absolute color (independent of shading color). Usage: <pre>\nrule AA { BB { RGB .8 .8 1 } }  // light bluish gray</pre><p>Usage:<code>RGB #D0D0FF</code>
HSLA=supply current absolute color in hue,saturation,lightness,alpha form.
d=set the maximum iterative depth of transitions (calls). Set to -1 to disable depth checks in current branch.
layer=set layer. Familiarly, a layer with greater value will be on top of a layer with smaller values, i.e. layer 1 will be drawn before layer 0.99. For memory efficiency, layers are clipped to one thousandth. This means that trying to set layer to 0.0019 and to 0.001 will both be evaluated as 0.001.

PUSH=push the given list of rules to the local rule stack.  They can then be called from inside a rule with POP (remove from stack) and PEEK (look up from stack, but do not remove).
POP=retrieves the topmost rule from the PUSH stack.  Usage:  <pre>\nrule AA { BB { PUSH CC } }\n. . .\nrule BB { POP { } } // POP will evaluate to CC</pre>
PEEK=looks up but does not remove the topmost rule from the PUSH stack.  Usage:  <pre>\nrule AA { BB { PUSH CC } }\n. . .\nrule BB { PEEK { } } // PEEK will evaluate to CC and stack will still hold CC topmost</pre>
DEF=define a constant or a branch-wise variable.
UNDEF=undefine a branch-wise variable.  It is advised to use undef with large numbers of DEF-calls to decrease memory footprint.

sin=sine function. Radians. Usage: <code>sin([expression]) </code>.
cos=cosine function. Radians.
tan=tangent function. Radians.
asin=arcus sine. Radians.
acos=arcus cosine. Radians.
atan=arcus tangent. Radians.
rnd=random number belonging to [0,1]. Does not draw from the variation random feed, but from system random number generator.
irnd=random integer. Usage <code>irnd([expression]) </code>. Return an integer value >= 0 and less than [expression].
pow=power. Usage <code> pow([base-expression], [power-expression]) </code>
sqrt=square root. Usage: <code> sqrt([expression]) </code>
log=10-based logarithm
square=square wave function, where values belong to [-0.5,0.5]. square(0)=square(0.99)=0.5. square(1)=square(1.99)=-0.5
saw=saw wave function, where values belong to [-0.5,0.5], and saw(0)=0, saw(1)=0,5, saw(2)=0, saw(3)=-0.5, saw(4)=0, ...
round=round function. Round towards the nearest integral value.
floor=floor function. Round downwards towards the nearest integral value that is less than or equal to x. Usage: <code> floor([x]) </code>
mean=the mean of the given arguments. Usage: <code> mean([val1],[val2],...,[valn]) </code>
max=the maximum of the two arguments.  Usage: <code>max([val1],[val2])</code>
min=the minimum of the two arguments.  Usage: <code>min([val1],[val2])</code>
mandelbrot=mandelbrot function (returns an integer between 0 and 255). <p>Usage: <code>mandelbrot([i], [j])</code>, where (i,j) is the position at the complex plane.
julia=julia function (returns an integer between 0 and 255). <p>Usage: <code>julia([i], [j], [i0], [j0])</code>, where (i,j) is the position at the complex plane.
abs=absolute value.<p>Usage: abs([value])

imgred=bitmap function - return the red value (0..1) from the selected input bitmap at (u,v).
imggreen=bitmap function - return the green value (0..1) from the selected input bitmap at (u,v).
imgblue=bitmap function - return the blue value (0..1) from the selected input bitmap at (u,v).
imgalpha=bitmap function - return the alpha value (0..1) from the selected input bitmap at (u,v).
imgwidth=bitmap function - return the width of the selected input bitmap, in pixels.
imgheight=bitmap function - return the height of the selected input bitmap, in pixels.

SQUARE=draws a square on the current z-plane, whose relative corners are {-0.5,-0.5,0}, {0.5,-0.5,0}, {0.5,0.5,0}, {-0.5,0.5,0}
CIRCLE=draws a circle on the currentv z-plane, which touches the following relative points {0,0.5,0,0},{0.5,0,0},{0,-0.5,0},{-0.5,0,0}
TRIANGLE=draws a triangle on the current z-plane, whose relative corners are at {0.5,0,0},{-0.5,-0.5,0},{0.5,-0.5,0}
BOX=draws a box centered on the current turtle position
RSQU=draws a rounded square on the current z-plane, whose corners approach those of a SQUARE

include=include another text file in the parsing. The text file is parsed at the call position. Usage: <code>include /home/user/data/test.txt</code>  would include text.txt from directory data, path /home... starting from root.
minfeaturesize=sets the absolute minimum feature size for transforms. Default is =0.0001. Expansions smaller than this will be pruned out of generation. Example: <code> model { minfeaturesize 0 }</code>.
pushstack=sets the maximum stack size of rules. Default is =16. Each branch will maintain its own stack. If stack limit is exceeded, oldest rules on the bottom of the stack will be quietly discarded to make space for the new. Example: <code> model { pushstack 1 }</code>
maxshapes=sets the absolute maximum number of output shapes for model. Example: <code> model { maxshapes 100000 }</code>.
startshape=enforces which rule will be 'S'-rule, from which generation will begin. <p>If not specified, the rule that is introduced first, will be used. Note that an include directive puts included rules to the  position of include call. <p>If multiple <code>startshape</code> directives are given, the last one is applied.<p>Example: <code>startshape rule1</code>
background= sets the background color. Example: <code> model { maxshapes 100000 }</code>.

moveto=paths - move turtle head to given relative index. Usage: <code>moveto (1.0, 0.0, 0.0)</code>.  <p>Curves are defined in three dimensions but drawn by the 2d algorithm, so in some cases the third dimension will introduce irregularity in the shape of the curve.
bend=paths - create a control point between two points on the cubic bezier curve. Usage:<code> . . .\nbend(1,0,0)\nbend(0,0,1)\ncurveto(0,0,1)</code>. <p>Curves are defined in three dimensions but drawn by the 2d algorithm, so in some cases the third dimension will introduce irregularity in the shape of the curve.
curveto=paths - draw a cubic curve from the previous coordinate to the given coordinate. Relation is given in terms of the current center (x,y,z); not in terms of the previous supplied coordinate.
lineto=paths - draw a line from the previous coordinate to the given coordinate.

feature=minimum size for output features (shapes). Applies inside the model { . . . } definition block only.
order=feature ordering principle on screen. <ul>known alternatives: <li>Z (default), <li>WIDTH, <li>SMALLNESS</ul>
/=division operator
*=multiplication operator
%=modulo operator
+=addition operator
-=subtraction; negation operators
\;=separator character for boolean expressions. Usage:<code>rule example { PRE { x > 0; y > 0 } CIRCLE { } }</code>
\==boolean operator 'equals'
<=boolean operator 'less than'
<\==boolean operator 'less than or equal'
>=boolean operator 'more than'
>\==boolean operator 'more than or equal'

**=power operator


//=comment rest of the line
/*=starts a c-style comment block
*/=ends a c-style comment block
{=starts a block
}=ends a block
(=left bracket, used in expressions
)=right bracket, used in expressions
[=
]=
,=separator character for function arguments. Usage: <code> CIRCLE { s max(x,y) }</code>