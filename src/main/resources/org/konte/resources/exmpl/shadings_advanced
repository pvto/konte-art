/** Tutorial: two-dimensional color-space
*
* Press [Ctrl+i] to open the shading editor
*/

shading red_cyan_black {
    point(0,0) { RGB 1 0 0 s .01}   // RED
    point(0,1) { RGB 0 0 1 s .01}   // BLUE
    point(1,1) { RGB 0 1 0 s .01}   // GREEN
    point(.5,.5) { RGB 0 0 0 s .01 A 0} // TRANSPARENT BLACK
    A 1     // completely opaque shading
}

fx 0 { 777 777 777 } // 3x3 gaussian blur on layer 0
//fx 0 { 333 333 333 } // blur accepting blue+green components only

/*
Try altering the
    "A 1"        line after the "point" lines:
try
    A 0
and
    A 0.5
Where does that red come from?


Next we'll do something a bit fancy.

Look at the first "point" definition (the red one).
Shadings are fully expression-enabled!

Replace "s .01" with
    s ((1-col0))       - and re-render.

Red should now fill almost the whole canvas.
A green row only appears where (1-col0) evaluates to
zero. In those parts, the red pivot
does now nothing!  Try scaling the new expression with some
factor, write e.g.
    s ((1-col0)/10).
Or better still, use a wave function.
I created red stripes with

    s ((square(col0*10)+.5)/1)

Try if you can create a checker-board effect.
*/


rule block { grid { ry -0 s 1.2  R 1 } }
rule grid {
  11* {x .066 DEF {x_ = x_ + .1}}
    11* {y .066 DEF {foo_ = foo_ + .1}}
      drw {x -.33 y -.33 s .06 sz 1.5
           col0 x_
           col1 foo_}
}

rule drw { 
    BOX { shading -1 L -1 s .5 rx 45 ry 45}
    BOX { shading red_cyan_black }
}


